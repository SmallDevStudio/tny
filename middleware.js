import { getToken } from "next-auth/jwt";
import { NextResponse } from "next/server";

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ Login
export async function middleware(req) {
    const token = await getToken({ req });

    const { pathname } = req.nextUrl;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ Login
    const protectedPaths = ["/profile", "/member"];
    const isProtectedPath = protectedPaths.some((path) => pathname.startsWith(path));

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ `admin`
    const adminPaths = ["/admin"];
    const isAdminPath = adminPaths.some((path) => pathname.startsWith(path));

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á Login ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ Token -> Redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ Sign In
    if (isProtectedPath && !token) {
        return NextResponse.redirect(new URL("/signin", req.url));
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á `/admin`
    if (isProtectedPath && !token) {
        return NextResponse.redirect(new URL("/signin", req.url));
    }

        // üîπ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á `/admin`
    if (isAdminPath && token?.user.role !== "admin") {
        return NextResponse.redirect(new URL("/error/403", req.url));
    }

    // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏î‡πâ
    return NextResponse.next();
}

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ matcher
export const config = {
    matcher: [
        "/profile",
        "/profile/:path*",
        "/member",
        "/member/:path*",
        "/admin",
        "/admin/:path*",
    ],
};
